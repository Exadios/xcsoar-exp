# Copyright_License {
#
#  XCSoar Glide Computer - http://www.xcsoar.org/
#  Copyright (C) 2000-2012 The XCSoar Project
#  A detailed list of copyright holders can be found in the file "AUTHORS".
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#}

Import ('*')

# Make common includes.
e.Command('XCSoar.rc',
          topdir + 'Data/XCSoar.rc',
          'cpp -o $TARGET $SOURCE -I' + topsrcdir + ' $CPPFLAGS')
e.Command('include/resource_data.h',
          'XCSoar.rc',
          'perl ' + topdir + 'tools/GenerateResources.pl $SOURCE > $TARGET')
e.Command('XCSoar-drawable.rc',
          topdir + 'Data/XCSoar.rc',
          'cpp -o $TARGET $SOURCE -I' + topsrcdir + ' $CPPFLAGS -DANDROID_DRAWABLE')
e.Command('include/android_drawable.h',
          'XCSoar-drawable.rc',
          'perl ' + topdir + 'tools/GenerateAndroidResources.pl $SOURCE > $TARGET')

bd = topsrcdir + 'Engine/Airspace/'
e.StaticLibrary('airspace',
                [ topsrcdir + '/Engine/Util/AircraftStateFilter.cpp',
                  bd + 'AirspacesTerrain.cpp',
                 	bd + 'Airspace.cpp',
                  bd + 'AirspaceAltitude.cpp',
                  bd + 'AirspaceAircraftPerformance.cpp',
                  bd + 'AbstractAirspace.cpp',
                  bd + 'AirspaceCircle.cpp',
                  bd + 'AirspacePolygon.cpp',
                  bd + 'Airspaces.cpp',
                  bd + 'AirspaceIntersectSort.cpp',
                  bd + 'AirspaceNearestSort.cpp',
                  bd + 'AirspaceSoonestSort.cpp',
                  bd + 'Predicate/AirspacePredicate.cpp',
                  bd + 'Predicate/AirspacePredicateAircraftInside.cpp',
                  bd + 'Predicate/AirspacePredicateHeightRange.cpp',
                  bd + 'AirspaceVisitor.cpp',
                  bd + 'AirspaceIntersectionVisitor.cpp',
                  bd + 'AirspaceWarningConfig.cpp',
                  bd + 'AirspaceWarningManager.cpp',
                  bd + 'AirspaceWarning.cpp',
                  bd + 'AirspaceSorter.cpp' ])

bd = topsrcdir + 'IO/Async/'
e.StaticLibrary('async', [ bd + 'IOThread.cpp',
                           bd + 'GlobalIOThread.cpp' ])

bd = topsrcdir + 'Audio/'
e.StaticLibrary('audio', [ bd + 'ToneSynthesiser.cpp',
                           bd + 'VarioSynthesiser.cpp',
                           bd + 'PCMPlayer.cpp' ])

bd = topsrcdir + 'Device/Driver/'
e.StaticLibrary('cai302', [ bd + 'CAI302/Protocol.cpp',
                            bd + 'CAI302/PocketNav.cpp',
                            bd + 'CAI302/Mode.cpp',
                            bd + 'CAI302/Parser.cpp',
                            bd + 'CAI302/Settings.cpp',
                            bd + 'CAI302/Declare.cpp',
                            bd + 'CAI302/Logger.cpp',
                            bd + 'CAI302/Manage.cpp',
                            bd + 'CAI302/Register.cpp' ])

e.StaticLibrary('contest',
                [ topsrcdir + '/Engine/Contest/Settings.cpp',
                  topsrcdir + '/Engine/Contest/ContestManager.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/Contests.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/AbstractContest.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/ContestDijkstra.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/DMStQuad.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/OLCLeague.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/OLCSprint.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/OLCClassic.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/OLCTriangle.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/OLCFAI.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/OLCPlus.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/DMStQuad.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/XContestFree.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/XContestTriangle.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/OLCSISAT.cpp',
                  topsrcdir + '/Engine/Contest/Solvers/NetCoupe.cpp' ])

bd = topsrcdir + 'Form/DataField/'
e.StaticLibrary('datafield', [ bd + 'Base.cpp',
                               bd + 'Boolean.cpp',
                               bd + 'ComboList.cpp',
                               bd + 'Enum.cpp',
                               bd + 'FileReader.cpp',
                               bd + 'Number.cpp',
                               bd + 'Float.cpp',
                               bd + 'Angle.cpp',
                               bd + 'RoughTime.cpp',
                               bd + 'Time.cpp',
                               bd + 'Integer.cpp',
                               bd + 'String.cpp',
                               bd + 'Prefix.cpp',
                               bd + 'Password.cpp' ])

bd = topsrcdir + 'Device/Driver/'
e.StaticLibrary('driver', [ bd + 'Volkslogger/Register.cpp',
                            bd + 'Volkslogger/Parser.cpp',
                            bd + 'Volkslogger/Protocol.cpp',
                            bd + 'Volkslogger/Declare.cpp',
                            bd + 'Volkslogger/Database.cpp',
                            bd + 'Volkslogger/Util.cpp',
                            bd + 'Volkslogger/dbbconv.cpp',
                            bd + 'Volkslogger/grecord.cpp',
                            bd + 'Volkslogger/vlapi2.cpp',
                            bd + 'Volkslogger/vlapihlp.cpp',
                            bd + 'Volkslogger/vlutils.cpp',
                            bd + 'Volkslogger/vlconv.cpp',
                            bd + 'Volkslogger/Logger.cpp',
                            bd + 'IMI/Protocol/MessageParser.cpp',
                            bd + 'IMI/Protocol/Communication.cpp',
                            bd + 'IMI/Protocol/Checksum.cpp',
                            bd + 'IMI/Protocol/Conversion.cpp',
                            bd + 'IMI/Protocol/IGC.cpp',
                            bd + 'IMI/Protocol/Protocol.cpp',
                            bd + 'IMI/Declare.cpp',
                            bd + 'IMI/Internal.cpp',
                            bd + 'IMI/Logger.cpp',
                            bd + 'IMI/Register.cpp',
                            bd + 'LX/NanoLogger.cpp',
                            bd + 'LX/Protocol.cpp',
                            bd + 'LX/Mode.cpp',
                            bd + 'LX/Parser.cpp',
                            bd + 'LX/Settings.cpp',
                            bd + 'LX/Declare.cpp',
                            bd + 'LX/Logger.cpp',
                            bd + 'LX/Convert.cpp',
                            bd + 'LX/LXN.cpp',
                            bd + 'LX/Register.cpp',
                            bd + 'FLARM/Device.cpp',
                            bd + 'FLARM/Register.cpp',
                            bd + 'FLARM/Mode.cpp',
                            bd + 'FLARM/Parser.cpp',
                            bd + 'FLARM/StaticParser.cpp',
                            bd + 'FLARM/Settings.cpp',
                            bd + 'FLARM/Declare.cpp',
                            bd + 'FLARM/Logger.cpp',
                            bd + 'FLARM/CRC16.cpp',
                            bd + 'FLARM/BinaryProtocol.cpp',
                            bd + 'FLARM/TextProtocol.cpp',
                            bd + 'Flytec/Register.cpp',
                            bd + 'Flytec/Parser.cpp',
                            bd + 'Flytec/Logger.cpp',
                            bd + 'Vega/Misc.cpp',
                            bd + 'Vega/Parser.cpp',
                            bd + 'Vega/Settings.cpp',
                            bd + 'Vega/Volatile.cpp',
                            bd + 'Vega/Register.cpp',
                            bd + 'AltairPro.cpp',
                            bd + 'BlueFlyVario.cpp',
                            bd + 'BorgeltB50.cpp',
                            bd + 'CaiGpsNav.cpp',
                            bd + 'Condor.cpp',
                            bd + 'CProbe.cpp',
                            bd + 'EW.cpp',
                            bd + 'EWMicroRecorder.cpp',
                            bd + 'Eye.cpp',
                            bd + 'FlymasterF1.cpp',
                            bd + 'FlyNet.cpp',
                            bd + 'Generic.cpp',
                            bd + 'LevilAHRS_G.cpp',
                            bd + 'Leonardo.cpp',
                            bd + 'GTAltimeter.cpp',
                            bd + 'NmeaOut.cpp',
                            bd + 'PosiGraph.cpp',
                            bd + 'XCOM760.cpp',
                            bd + 'ILEC.cpp',
                            bd + 'Westerboer.cpp',
                            bd + 'WesterboerVW921.cpp',
                            bd + 'Zander.cpp' ])

event_srcs = [ topsrcdir + '/Event/Idle.cpp',
	             topsrcdir + '/Event/DelayedNotify.cpp',
	             topsrcdir + '/Event/Notify.cpp' ]
if e['ENABLE_SDL'] == 'y':
  event_srcs = event_srcs + [ topsrcdir + '/Event/SDL/Timer.cpp',
	                            topsrcdir + '/Event/SDL/Loop.cpp',
	                            topsrcdir + '/Event/SDL/Queue.cpp' ]
e.StaticLibrary('event', event_srcs)

bd = topsrcdir + 'Form/'
e.StaticLibrary('form', [ topsrcdir + 'UIUtil/KineticManager.cpp',
                          topsrcdir + 'Renderer/ButtonRenderer.cpp',
                          topsrcdir + 'Renderer/SymbolRenderer.cpp',
                          bd + 'Internal.cpp',
                          bd + 'Control.cpp',
                          bd + 'Panel.cpp',
                          bd + 'SubForm.cpp',
                          bd + 'Form.cpp',
                          bd + 'Button.cpp',
                          bd + 'ButtonPanel.cpp',
                          bd + 'CheckBox.cpp',
                          bd + 'SymbolButton.cpp',
                          bd + 'Frame.cpp',
                          bd + 'Draw.cpp',
                          bd + 'List.cpp',
                          bd + 'ScrollBar.cpp',
                          bd + 'Edit.cpp',
                          bd + 'DigitEntry.cpp',
                          bd + 'Tabbed.cpp',
                          bd + 'TabBar.cpp',
                          bd + 'TabDisplay.cpp',
                          bd + 'TabMenu.cpp',
                          bd + 'TabMenuDisplay.cpp',
                          bd + 'Keyboard.cpp',
                          bd + 'UnitUtil.cpp',
                          bd + 'ProfileUtil.cpp',
                          bd + 'GridView.cpp',
                          bd + 'CustomButton.cpp',
                          bd + 'HLine.cpp',
                          bd + 'Util.cpp' ])

bd = topsrcdir + 'Geo/'
e.StaticLibrary('geo', [ bd + 'ConvexHull/GrahamScan.cpp',
                         bd + 'ConvexHull/PolygonInterior.cpp',
                         bd + 'Memento/DistanceMemento.cpp',
                         bd + 'Memento/GeoVectorMemento.cpp',
                         bd + 'Flat/TaskProjection.cpp',
                         bd + 'Flat/FlatBoundingBox.cpp',
                         bd + 'Flat/FlatGeoPoint.cpp',
                         bd + 'Flat/FlatRay.cpp',
                         bd + 'Flat/FlatPoint.cpp',
                         bd + 'Flat/FlatEllipse.cpp',
                         bd + 'Flat/FlatLine.cpp',
                         bd + 'Math.cpp',
                         bd + 'GeoPoint.cpp',
                         bd + 'GeoVector.cpp',
                         bd + 'GeoBounds.cpp',
                         bd + 'GeoClip.cpp',
                         bd + 'SearchPoint.cpp',
                         bd + 'SearchPointVector.cpp',
                         bd + 'GeoEllipse.cpp',
                         bd + 'UTM.cpp' ])

bd = topsrcdir + 'Engine/GlideSolvers/'
e.StaticLibrary('glide', [ bd + 'GlideSettings.cpp',
                           bd + 'GlideState.cpp',
                           bd + 'GlidePolar.cpp',
                           bd + 'PolarCoefficients.cpp',
                           bd + 'GlideResult.cpp',
                           bd + 'MacCready.cpp' ])

bd = topsrcdir + 'IO/'
e.StaticLibrary('io', [ bd + 'FileTransaction.cpp',
                        bd + 'FileCache.cpp',
                        bd + 'FileSource.cpp',
                        bd + 'ZipSource.cpp',
                        bd + 'LineSplitter.cpp',
                        bd + 'ConvertLineReader.cpp',
                        bd + 'FileLineReader.cpp',
                        bd + 'KeyValueFileReader.cpp',
                        bd + 'KeyValueFileWriter.cpp',
                        bd + 'ZipLineReader.cpp',
                        bd + 'TextFile.cpp',
                        bd + 'CSVLine.cpp',
                        bd + 'BatchTextWriter.cpp',
                        bd + 'BinaryWriter.cpp',
                        bd + 'TextWriter.cpp' ])


bd = topsrcdir + 'Terrain/jasper/'
e.StaticLibrary('jasper', [ bd + 'base/jas_debug.c',
                            bd + 'base/jas_malloc.c',
                            bd + 'base/jas_seq.c',
                            bd + 'base/jas_stream.c',
                            bd + 'base/jas_string.c',
                            bd + 'base/jas_tvp.c',
                            bd + 'jp2/jp2_cod.c',
                            bd + 'jp2/jp2_dec.c',
                            bd + 'jpc/jpc_bs.c',
                            bd + 'jpc/jpc_cs.c',
                            bd + 'jpc/jpc_dec.c',
                            bd + 'jpc/jpc_math.c',
                            bd + 'jpc/jpc_mct.c',
                            bd + 'jpc/jpc_mqdec.c',
                            bd + 'jpc/jpc_mqcod.c',
                            bd + 'jpc/jpc_qmfb.c',
                            bd + 'jpc/jpc_rtc.cpp',
                            bd + 'jpc/jpc_t1dec.c',
                            bd + 'jpc/jpc_t1cod.c',
                            bd + 'jpc/jpc_t2dec.c',
                            bd + 'jpc/jpc_t2cod.c',
                            bd + 'jpc/jpc_tagtree.c',
                            bd + 'jpc/jpc_tsfb.c',
                            bd + 'jpc/jpc_util.c' ])

bd = topsrcdir + 'Math/'
e.StaticLibrary('math', [ bd + 'Angle.cpp',
                          bd + 'ARange.cpp',
                          bd + 'FastMath.cpp',
                          bd + 'FastTrig.cpp',
                          bd + 'FastRotation.cpp',
                          bd + 'fixed.cpp',
                          bd + 'LeastSquares.cpp',
                          bd + 'DiffFilter.cpp',
                          bd + 'Filter.cpp',
                          bd + 'ZeroFinder.cpp',
                          bd + 'KalmanFilter1d.cpp',
                          bd + 'SelfTimingKalmanFilter1d.cpp',
                          bd + 'MatrixT.cpp',
                          bd + 'VectorT.cpp',
                          bd + 'kalman/kstatics.cpp' ])


bd = topsrcdir + 'Net/'
e.ParseConfig("pkg-config libcurl --cflags --libs")
e.StaticLibrary('net', [ bd + 'CURL/Multi.cpp',
                         bd + 'CURL/Session.cpp',
                         bd + 'CURL/Request.cpp',
                         bd + 'CURL/Init.cpp',
                         bd + 'DownloadManager.cpp',
                         bd + 'ToFile.cpp',
                         bd + 'ToBuffer.cpp' ])

e.StaticLibrary('os', [ topsrcdir + '/OS/Clock.cpp',
                        topsrcdir + '/OS/SocketAddress.cpp',
                        topsrcdir + '/OS/SocketDescriptor.cpp',
                        topsrcdir + '/OS/FileDescriptor.cpp',
                        topsrcdir + '/OS/FileMapping.cpp',
                        topsrcdir + '/OS/FileUtil.cpp',
                        topsrcdir + '/OS/PathName.cpp',
                        topsrcdir + '/OS/SystemLoad.cpp',
                        topsrcdir + '/OS/Poll.cpp',
                        topsrcdir + '/OS/EventPipe.cpp',
                        topsrcdir + '/OS/LogError.cpp' ])

bd = topsrcdir + 'Device/Port/'
port_srcs = [	bd + 'Port.cpp',
              bd + 'BufferedPort.cpp',
              bd + 'SocketPort.cpp',
              bd + 'TCPPort.cpp',
              bd + 'K6BtPort.cpp',
              bd + 'NullPort.cpp' ]
l = e.Clone()
if l['PLATFORM'] == 'Posix':
  port_srcs = port_srcs + [ bd + 'TTYPort.cpp' ]

if l['DEBUG'] == 'y':
  port_srcs = port_srcs + [ bd + 'DumpPort.cpp' ]

# broken Android headers
if l['TARGET_OS'] == 'Android':
  m = l.Clone()
  m.Append(CXXFLAGS = '-Wno-cast-align')
  m.Object('SocketPort.cpp')
  m.Object('TCPPort.cpp')

l.StaticLibrary('port', port_srcs)

bd = topsrcdir + 'Profile/'
l.StaticLibrary('profile', [ bd + 'ProfileMap.cpp' ])

bd = topsrcdir + 'Engine/Route/'
l.StaticLibrary('route', [ bd + 'Config.cpp',
                           bd + 'RoutePlanner.cpp',
                           bd + 'AirspaceRoute.cpp',
                           bd + 'TerrainRoute.cpp',
                           bd + 'RouteLink.cpp',
                           bd + 'RoutePolar.cpp',
                           bd + 'RoutePolars.cpp',
                           bd + 'FlatTriangleFan.cpp',
                           bd + 'FlatTriangleFanTree.cpp',
                           bd + 'ReachFan.cpp' ])

bd = topsrcdir + 'Screen/'
screen_custom_srcs = [ bd + 'Custom/Timer.cpp',
                       bd + 'Custom/TextWindow.cpp',
                       bd + 'Custom/LargeTextWindow.cpp',
                       bd + 'Custom/ButtonWindow.cpp',
                       bd + 'Custom/Window.cpp',
                       bd + 'Custom/WList.cpp',
                       bd + 'Custom/ContainerWindow.cpp',
                       bd + 'Custom/CheckBox.cpp',
                       bd + 'Custom/EditWindow.cpp',
                       bd + 'Custom/TopWindow.cpp',
                       bd + 'Custom/SingleWindow.cpp',
                       bd + 'Custom/Canvas.cpp' ]

screen_srcs = [	bd + 'Debug.cpp',
                bd + 'ProgressBar.cpp',
                bd + 'Util.cpp',
                bd + 'Icon.cpp',
                bd + 'Brush.cpp',
                bd + 'Canvas.cpp',
                bd + 'Color.cpp',
                bd + 'BufferCanvas.cpp',
                bd + 'Pen.cpp',
                bd + 'Window.cpp',
                bd + 'BufferWindow.cpp',
                bd + 'DoubleBufferWindow.cpp',
                bd + 'SingleWindow.cpp',
               	bd + 'OpenGL/Init.cpp',
                bd + 'OpenGL/Globals.cpp',
                bd + 'OpenGL/Extension.cpp',
                bd + 'OpenGL/FBO.cpp',
                bd + 'OpenGL/VertexArray.cpp',
                bd + 'OpenGL/Bitmap.cpp',
                bd + 'OpenGL/RawBitmap.cpp',
                bd + 'OpenGL/Cache.cpp',
                bd + 'OpenGL/Canvas.cpp',
                bd + 'OpenGL/BufferCanvas.cpp',
                bd + 'OpenGL/TopCanvas.cpp',
                bd + 'OpenGL/Texture.cpp',
                bd + 'OpenGL/Buffer.cpp',
                bd + 'OpenGL/Shapes.cpp',
                bd + 'OpenGL/Surface.cpp',
                bd + 'OpenGL/Triangulate.cpp',
                bd + '/SDL/Font.cpp' ]
if e['TARGET_OS'] == 'Android':
  screen_srcs += screen_custom_srcs
  screen_srcs += [ bd + 'OpenGL/EGL.cpp',
                   bd + 'Android/Window.cpp',
                   bd + 'Android/TopWindow.cpp',
                   bd + 'Android/SingleWindow.cpp',
                   bd + 'Android/TopCanvas.cpp',
                   bd + 'Android/Bitmap.cpp',
                   bd + 'Android/Font.cpp' ]
if e['ENABLE_SDL'] == 'y':
  screen_srcs += screen_custom_srcs
  screen_srcs += [ bd + '/Custom/Files.cpp',
                   bd + 'SDL/Window.cpp',
                   bd + 'SDL/TopWindow.cpp',
                   bd + 'SDL/SingleWindow.cpp',
                   bd + 'SDL/TopCanvas.cpp',
                   bd + 'SDL/Bitmap.cpp',
                   bd + 'SDL/Init.cpp' ]
e.StaticLibrary('screen', screen_srcs)

bd = topsrcdir + 'Topography/shapelib/'
e.StaticLibrary('shapelib', [ bd + 'mapstring.c',
                              bd + 'mapbits.c',
                              bd + 'mapfile.c',
                              bd + 'mapprimitive.c',
                              bd + 'mapsearch.c',
                              bd + 'mapshape.c',
                              bd + 'maptree.c',
                              bd + 'mapxbase.c' ])

bd = topsrcdir + 'Engine/Task/'
e.StaticLibrary('task', [ bd + 'Shapes/FAITriangleRules.cpp',
                          bd + 'Shapes/FAITriangleArea.cpp',
                          bd + 'Shapes/FAITriangleTask.cpp',
                          bd + 'Shapes/FAITrianglePointValidator.cpp',
                          bd + 'TaskBehaviour.cpp',
                          bd + 'TaskManager.cpp',
                          bd + 'AbstractTask.cpp',
                          bd + 'Ordered/StartConstraints.cpp',
                          bd + 'Ordered/FinishConstraints.cpp',
                          bd + 'Ordered/OrderedTaskBehaviour.cpp',
                          bd + 'Ordered/OrderedTask.cpp',
                          bd + 'Ordered/TaskAdvance.cpp',
                          bd + 'Ordered/TaskAdvanceSmart.cpp',
                          bd + 'Ordered/Points/IntermediatePoint.cpp',
                          bd + 'Ordered/Points/OrderedTaskPoint.cpp',
                          bd + 'Ordered/Points/StartPoint.cpp',
                          bd + 'Ordered/Points/FinishPoint.cpp',
                          bd + 'Ordered/Points/ASTPoint.cpp',
                          bd + 'Ordered/Points/AATPoint.cpp',
                          bd + 'Ordered/AATIsoline.cpp',
                          bd + 'Ordered/AATIsolineSegment.cpp',
                          bd + 'Unordered/UnorderedTask.cpp',
                          bd + 'Unordered/UnorderedTaskPoint.cpp',
                          bd + 'Unordered/GotoTask.cpp',
                          bd + 'Unordered/AbortTask.cpp',
                          bd + 'Unordered/AlternateTask.cpp',
                          bd + 'Factory/AbstractTaskFactory.cpp',
                          bd + 'Factory/RTTaskFactory.cpp',
                          bd + 'Factory/FAITaskFactory.cpp',
                          bd + 'Factory/FAITriangleTaskFactory.cpp',
                          bd + 'Factory/FAIORTaskFactory.cpp',
                          bd + 'Factory/FAIGoalTaskFactory.cpp',
                          bd + 'Factory/AATTaskFactory.cpp',
                          bd + 'Factory/MixedTaskFactory.cpp',
                          bd + 'Factory/TouringTaskFactory.cpp',
                          bd + 'Factory/Create.cpp',
                          bd + 'Points/TaskPoint.cpp',
                          bd + 'Points/SampledTaskPoint.cpp',
                          bd + 'Points/ScoredTaskPoint.cpp',
                          bd + 'Points/TaskLeg.cpp',
                          bd + 'ObservationZones/Boundary.cpp',
                          bd + 'ObservationZones/ObservationZoneClient.cpp',
                          bd + 'ObservationZones/ObservationZonePoint.cpp',
                          bd + 'ObservationZones/CylinderZone.cpp',
                          bd + 'ObservationZones/SectorZone.cpp',
                          bd + 'ObservationZones/LineSectorZone.cpp',
                          bd + 'ObservationZones/SymmetricSectorZone.cpp',
                          bd + 'ObservationZones/KeyholeZone.cpp',
                          bd + 'ObservationZones/AnnularSectorZone.cpp',
                          bd + 'ObservationZones/FAISectorZone.cpp',
                          bd + 'PathSolvers/TaskDijkstra.cpp',
                          bd + 'PathSolvers/TaskDijkstraMin.cpp',
                          bd + 'PathSolvers/TaskDijkstraMax.cpp',
                          bd + 'PathSolvers/IsolineCrossingFinder.cpp',
                          bd + 'Solvers/TaskMacCready.cpp',
                          bd + 'Solvers/TaskMacCreadyTravelled.cpp',
                          bd + 'Solvers/TaskMacCreadyRemaining.cpp',
                          bd + 'Solvers/TaskMacCreadyTotal.cpp',
                          bd + 'Solvers/TaskBestMc.cpp',
                          bd + 'Solvers/TaskSolveTravelled.cpp',
                          bd + 'Solvers/TaskCruiseEfficiency.cpp',
                          bd + 'Solvers/TaskEffectiveMacCready.cpp',
                          bd + 'Solvers/TaskMinTarget.cpp',
                          bd + 'Solvers/TaskOptTarget.cpp',
                          bd + 'Solvers/TaskGlideRequired.cpp',
                          bd + 'Solvers/TaskSolution.cpp',
                          bd + 'Stats/DistanceStat.cpp',
                          bd + 'Stats/CommonStats.cpp',
                          bd + 'Stats/ElementStat.cpp',
                          bd + 'Stats/TaskStats.cpp',
                          bd + 'Stats/TaskVario.cpp' ])

bd = topsrcdir + 'Terrain/'
e.StaticLibrary('terrain', [ bd + 'RasterBuffer.cpp',
                             bd + 'RasterProjection.cpp',
                             bd + 'RasterMap.cpp',
                             bd + 'RasterTile.cpp',
                             bd + 'RasterTileCache.cpp',
                             bd + 'Intersection.cpp',
                             bd + 'ScanLine.cpp',
                             bd + 'RasterTerrain.cpp',
                             bd + 'RasterWeather.cpp',
                             bd + 'HeightMatrix.cpp',
                             bd + 'RasterRenderer.cpp',
                             bd + 'TerrainRenderer.cpp',
                             bd + 'WeatherTerrainRenderer.cpp',
                             bd + 'TerrainSettings.cpp' ])

bd = topsrcdir + 'Time/'
e.StaticLibrary('time', [ bd + 'BrokenTime.cpp',
                          bd + 'BrokenDate.cpp',
                          bd + 'BrokenDateTime.cpp' ])

bd = topsrcdir + 'Thread/'
e.StaticLibrary('thread', [ topsrcdir + 'Poco/RWLock.cpp',
                            bd + 'Thread.cpp',
                            bd + 'SuspensibleThread.cpp',
                            bd + 'RecursivelySuspensibleThread.cpp',
                            bd + 'WorkerThread.cpp',
                            bd + 'StandbyThread.cpp',
                            bd + 'Mutex.cpp',
                            bd + 'Debug.cpp' ])

bd = topsrcdir + 'Util/'
e.StaticLibrary('util', [ bd + 'CRC.cpp',
                          bd + 'tstring.cpp',
                          bd + 'UTF8.cpp',
                          bd + 'EscapeBackslash.cpp',
                          bd + 'ConvertString.cpp',
                          bd + 'StringUtil.cpp' ])

bd = topsrcdir + 'Engine/Waypoint/'
e.StaticLibrary('waypoint', [ bd + 'WaypointVisitor.cpp',
                              bd + 'Waypoints.cpp',
                              bd + 'Waypoint.cpp' ])

bd = topsrcdir + 'Widget/'
e.StaticLibrary('widget', [ bd + 'Widget.cpp',
                            bd + 'ActionWidget.cpp',
                            bd + 'WindowWidget.cpp',
                            bd + 'ListWidget.cpp',
                            bd + 'ContainerWidget.cpp',
                            bd + 'PanelWidget.cpp',
                            bd + 'TextWidget.cpp',
                            bd + 'LargeTextWidget.cpp',
                            bd + 'OverlappedWidget.cpp',
                            bd + 'TwoWidgets.cpp',
                            bd + 'RowFormWidget.cpp',
                            bd + 'ManagedWidget.cpp',
                            bd + 'PagerWidget.cpp',
                            bd + 'OffsetButtonsWidget.cpp',
                            bd + 'XMLWidget.cpp',
                            bd + 'ButtonPanelWidget.cpp',
                            bd + 'DockWindow.cpp' ])

bd = topsrcdir + 'zzip/'
l = e.Clone(CPPFLAGS = '-Wno-strict-aliasing')
l.StaticLibrary('zzip', [ bd + 'fetch.c',
                          bd + 'file.c',
                          bd + 'plugin.c',
                          bd + 'zip.c',
                          bd + 'stat.c' ])

bd = topsrcdir + '/'
inu_srcs = [
	bd + '/Engine/Navigation/INU/Inu.cpp',
	bd + '/Engine/Navigation/INU/INUKalman.cpp'
  ]

dialog_srcs = [
	bd + '/Dialogs/XML.cpp',
	bd + '/Dialogs/Inflate.cpp',
	bd + '/Dialogs/Message.cpp',
	bd + '/Dialogs/ListPicker.cpp',
	bd + '/Dialogs/JobDialog.cpp',
	bd + '/Dialogs/WidgetDialog.cpp',
	bd + '/Dialogs/FileManager.cpp',
	bd + '/Dialogs/Device/DeviceEditWidget.cpp',
	bd + '/Dialogs/Device/DeviceListDialog.cpp',
	bd + '/Dialogs/Device/PortMonitor.cpp',
	bd + '/Dialogs/Device/ManageCAI302Dialog.cpp',
	bd + '/Dialogs/Device/CAI302/UnitsEditor.cpp',
	bd + '/Dialogs/Device/CAI302/WaypointUploader.cpp',
	bd + '/Dialogs/Device/ManageFlarmDialog.cpp',
	bd + '/Dialogs/Device/LX/ManageV7Dialog.cpp',
	bd + '/Dialogs/Device/LX/V7ConfigWidget.cpp',
	bd + '/Dialogs/Device/LX/ManageNanoDialog.cpp',
	bd + '/Dialogs/Device/LX/NanoConfigWidget.cpp',
	bd + '/Dialogs/Device/LX/ManageLX16xxDialog.cpp',
	bd + '/Dialogs/Device/Vega/VegaParametersWidget.cpp',
	bd + '/Dialogs/Device/Vega/VegaConfigurationDialog.cpp',
	bd + '/Dialogs/Device/Vega/VegaDemoDialog.cpp',
	bd + '/Dialogs/Device/Vega/VoiceSettingsDialog.cpp',
	bd + '/Dialogs/Device/Vega/SwitchesDialog.cpp',
	bd + '/Dialogs/Device/FLARM/ConfigWidget.cpp',
	bd + '/Dialogs/MapItemListDialog.cpp',
	bd + '/Dialogs/MapItemListSettingsDialog.cpp',
	bd + '/Dialogs/MapItemListSettingsPanel.cpp',
	bd + '/Dialogs/ColorListDialog.cpp',
	bd + '/Dialogs/Airspace/dlgAirspace.cpp',
	bd + '/Dialogs/Airspace/dlgAirspacePatterns.cpp',
	bd + '/Dialogs/Airspace/dlgAirspaceDetails.cpp',
	bd + '/Dialogs/Airspace/AirspaceList.cpp',
	bd + '/Dialogs/Airspace/AirspaceCRendererSettingsDialog.cpp',
	bd + '/Dialogs/Airspace/AirspaceCRendererSettingsPanel.cpp',
	bd + '/Dialogs/Airspace/dlgAirspaceWarnings.cpp',
	bd + '/Dialogs/Settings/WindSettingsPanel.cpp',
	bd + '/Dialogs/Settings/WindSettingsDialog.cpp',
	bd + '/Dialogs/Settings/dlgBasicSettings.cpp',
	bd + '/Dialogs/Settings/dlgConfiguration.cpp',
	bd + '/Dialogs/Settings/dlgConfigFonts.cpp',
	bd + '/Dialogs/Settings/dlgConfigInfoboxes.cpp',
	bd + '/Dialogs/Settings/FontEdit.cpp',
	bd + '/Dialogs/Traffic/TrafficList.cpp',
	bd + '/Dialogs/Traffic/FlarmTrafficDetails.cpp',
	bd + '/Dialogs/Traffic/TeamCodeDialog.cpp',
	bd + '/Dialogs/dlgAnalysis.cpp',
	bd + '/Dialogs/dlgBrightness.cpp',
	bd + '/Dialogs/dlgChecklist.cpp',
	bd + '/Dialogs/Plane/PlaneListDialog.cpp',
	bd + '/Dialogs/Plane/PlaneDetailsDialog.cpp',
	bd + '/Dialogs/Plane/PlanePolarDialog.cpp',
	bd + '/Dialogs/Plane/PolarShapeEditWidget.cpp',
	bd + '/Dialogs/ComboPicker.cpp',
	bd + '/Dialogs/FilePicker.cpp',
	bd + '/Dialogs/HelpDialog.cpp',
	bd + '/Dialogs/dlgInfoBoxAccess.cpp',
	bd + '/Dialogs/ReplayDialog.cpp',
	bd + '/Dialogs/dlgSimulatorPrompt.cpp',
	bd + '/Dialogs/dlgStartup.cpp',

	bd + '/Dialogs/dlgStatus.cpp',
	bd + '/Dialogs/StatusPanels/StatusPanel.cpp',
	bd + '/Dialogs/StatusPanels/FlightStatusPanel.cpp',
	bd + '/Dialogs/StatusPanels/SystemStatusPanel.cpp',
	bd + '/Dialogs/StatusPanels/TaskStatusPanel.cpp',
	bd + '/Dialogs/StatusPanels/RulesStatusPanel.cpp',
	bd + '/Dialogs/StatusPanels/TimesStatusPanel.cpp',

	bd + '/Dialogs/Waypoint/WaypointInfoWidget.cpp',
	bd + '/Dialogs/Waypoint/WaypointCommandsWidget.cpp',
	bd + '/Dialogs/Waypoint/dlgWaypointDetails.cpp',
	bd + '/Dialogs/Waypoint/Manager.cpp',
	bd + '/Dialogs/Waypoint/dlgWaypointEdit.cpp',
	bd + '/Dialogs/Waypoint/WaypointList.cpp',
	bd + '/Dialogs/Waypoint/NearestWaypoint.cpp',

	bd + '/Dialogs/Settings/Panels/AirspaceConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/DevicesConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/ExperimentalConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/GaugesConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/VarioConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/GlideComputerConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/WindConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/InfoBoxesConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/InterfaceConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/LayoutConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/LoggerConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/LoggerInfoConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/MapDisplayConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/PagesConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/PolarConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/RouteConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/SafetyFactorsConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/SiteConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/SymbolsConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/TaskRulesConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/TaskDefaultsConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/TerrainDisplayConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/UnitsConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/TimeConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/WaypointDisplayConfigPanel.cpp',
	bd + '/Dialogs/Settings/Panels/TrackingConfigPanel.cpp',

	bd + '/Dialogs/Task/Widgets/ObservationZoneEditWidget.cpp',
	bd + '/Dialogs/Task/Widgets/CylinderZoneEditWidget.cpp',
	bd + '/Dialogs/Task/Widgets/LineSectorZoneEditWidget.cpp',
	bd + '/Dialogs/Task/Widgets/SectorZoneEditWidget.cpp',
	bd + '/Dialogs/Task/Manager/TaskMapWindow.cpp',
	bd + '/Dialogs/Task/Manager/TaskManagerDialog.cpp',
	bd + '/Dialogs/Task/Manager/TaskClosePanel.cpp',
	bd + '/Dialogs/Task/Manager/TaskEditPanel.cpp',
	bd + '/Dialogs/Task/Manager/TaskPropertiesPanel.cpp',
	bd + '/Dialogs/Task/Manager/TaskMiscPanel.cpp',
	bd + '/Dialogs/Task/Manager/TaskActionsPanel.cpp',
	bd + '/Dialogs/Task/Manager/TaskListPanel.cpp',
	bd + '/Dialogs/Task/Manager/TaskCalculatorPanel.cpp',
	bd + '/Dialogs/Task/dlgTaskOptionalStarts.cpp',
	bd + '/Dialogs/Task/dlgTaskPoint.cpp',
	bd + '/Dialogs/Task/dlgTaskPointType.cpp',
	bd + '/Dialogs/Task/dlgTaskHelpers.cpp',
	bd + '/Dialogs/Task/dlgTarget.cpp',
	bd + '/Dialogs/Task/dlgAlternatesList.cpp',

	bd + '/Dialogs/NumberEntry.cpp',
	bd + '/Dialogs/dlgTextEntry.cpp',
	bd + '/Dialogs/dlgTextEntry_Keyboard.cpp',
	bd + '/Dialogs/TimeEntry.cpp',
	bd + '/Dialogs/dlgWeather.cpp',
	bd + '/Dialogs/dlgCredits.cpp',
	bd + '/Dialogs/dlgQuickMenu.cpp'
  ]
if e['HAVE_PCM_PLAYER'] == 'y':
  dialog_srcs += [ bd + 'Dialogs/Settings/Panels/AudioVarioConfigPanel.cpp' ]
if e['HAVE_HTTP'] == 'y':
  dialog_srcs += [ bd + 'Dialogs/Weather/NOAAList.cpp',
                   bd + 'Dialogs/Weather/NOAADetails.cpp' ]

xcsoar_srcs = [
  bd + 'IO/ConfiguredFile.cpp',
  bd + 'IO/DataFile.cpp',
  bd + '/Airspace/ProtectedAirspaceWarningManager.cpp',
  bd + '/Task/Serialiser.cpp',
  bd + '/Task/Deserialiser.cpp',
  bd + '/Task/TaskFile.cpp',
  bd + '/Task/TaskFileXCSoar.cpp',
  bd + '/Task/TaskFileIGC.cpp',
  bd + '/Task/TaskFileSeeYou.cpp',
  bd + '/Task/MapTaskManager.cpp',
  bd + '/Task/ProtectedTaskManager.cpp',
  bd + '/Task/RoutePlannerGlue.cpp',
  bd + '/Task/ProtectedRoutePlanner.cpp',
  bd + '/Task/TaskStore.cpp',
  bd + '/Task/TypeStrings.cpp',
  bd + '/RadioFrequency.cpp',
  bd + '/Engine/Navigation/TraceHistory.cpp',
  bd + '/Engine/Navigation/Aircraft.cpp',
  bd + '/Engine/Trace/Point.cpp',
  bd + '/Engine/Trace/Trace.cpp',
  bd + '/Engine/Trace/Vector.cpp',
  bd + '/Engine/Util/Gradient.cpp',
  bd + '/Renderer/GlassRenderer.cpp',
  bd + '/Renderer/LabelBlock.cpp',
  bd + '/Renderer/TextInBox.cpp',
  bd + '/Renderer/TraceHistoryRenderer.cpp',
  bd + '/Renderer/ThermalBandRenderer.cpp',
  bd + '/Renderer/TaskProgressRenderer.cpp',
  bd + '/Renderer/MarkerRenderer.cpp',
  bd + '/Airspace/AirspaceGlue.cpp',
  bd + '/Airspace/AirspaceParser.cpp',
  bd + '/Airspace/AirspaceVisibility.cpp',
  bd + '/Airspace/AirspaceComputerSettings.cpp',
  bd + '/Renderer/AirspaceRendererSettings.cpp',
  bd + '/Operation/Operation.cpp',
  bd + '/Operation/ProxyOperationEnvironment.cpp',
  bd + '/Operation/NoCancelOperationEnvironment.cpp',
  bd + '/Operation/PopupOperationEnvironment.cpp',
  bd + '/Operation/MessageOperationEnvironment.cpp',
  bd + '/Operation/ThreadedOperationEnvironment.cpp',
  bd + '/Operation/VerboseOperationEnvironment.cpp',
  bd + '/Atmosphere/Pressure.cpp',
  bd + '/Atmosphere/AirDensity.cpp',
  bd + '/Atmosphere/CuSonde.cpp',
  bd + '/Computer/ClimbAverageCalculator.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitor.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitorAATTime.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitorFinalGlide.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitorGlideTerrain.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitorLandableReachable.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitorStartRules.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitorSunset.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitorWind.cpp',
  bd + '/Computer/ConditionMonitor/ConditionMonitors.cpp',
  bd + '/Plane/PlaneGlue.cpp',
  bd + '/Plane/PlaneFileGlue.cpp',
  bd + '/FLARM/FlarmId.cpp',
  bd + '/FLARM/Error.cpp',
  bd + '/FLARM/List.cpp',
  bd + '/FLARM/FlarmNetRecord.cpp',
  bd + '/FLARM/FlarmNetDatabase.cpp',
  bd + '/FLARM/FlarmNetReader.cpp',
  bd + '/FLARM/Traffic.cpp',
  bd + '/FLARM/FlarmCalculations.cpp',
  bd + '/FLARM/Friends.cpp',
  bd + '/FLARM/FlarmComputer.cpp',
  bd + '/FLARM/Global.cpp',
  bd + '/FLARM/Glue.cpp',
  bd + '/Computer/CuComputer.cpp',
  bd + '/Computer/FlyingComputer.cpp',
  bd + '/Computer/CirclingComputer.cpp',
  bd + '/Computer/ThermalBandComputer.cpp',
  bd + '/Computer/WindComputer.cpp',
  bd + '/Computer/ContestComputer.cpp',
  bd + '/Computer/TraceComputer.cpp',
  bd + '/Computer/WarningComputer.cpp',
  bd + '/Computer/ThermalLocator.cpp',
  bd + '/Computer/ThermalBase.cpp',
  bd + '/Computer/LiftDatabaseComputer.cpp',
  bd + '/Computer/LogComputer.cpp',
  bd + '/Computer/AverageVarioComputer.cpp',
  bd + '/Computer/GlideRatioCalculator.cpp',
  bd + '/Computer/GlideRatioComputer.cpp',
  bd + '/Computer/GlideComputer.cpp',
  bd + '/Computer/GlideComputerBlackboard.cpp',
  bd + '/Computer/GlideComputerAirData.cpp',
  bd + '/Computer/StatsComputer.cpp',
  bd + '/Computer/RouteComputer.cpp',
  bd + '/Computer/TaskComputer.cpp',
  bd + '/Computer/GlideComputerInterface.cpp',
  bd + '/Computer/Events.cpp',
  bd + '/BallastDumpManager.cpp',
  bd + '/Logger/Settings.cpp',
  bd + '/Logger/Logger.cpp',
  bd + '/Logger/LoggerFRecord.cpp',
  bd + '/Logger/GRecord.cpp',
  bd + '/Logger/LoggerEPE.cpp',
  bd + '/Logger/LoggerImpl.cpp',
  bd + '/Logger/IGCFileCleanup.cpp',
  bd + '/IGC/IGCFix.cpp',
  bd + '/IGC/IGCWriter.cpp',
  bd + '/IGC/IGCString.cpp',
  bd + '/Logger/MD5.cpp',
  bd + '/Logger/NMEALogger.cpp',
  bd + '/Logger/ExternalLogger.cpp',
  bd + '/Logger/FlightLogger.cpp',
  bd + '/Logger/GlueFlightLogger.cpp',
  bd + '/NMEA/Info.cpp',
  bd + '/NMEA/MoreData.cpp',
  bd + '/NMEA/Acceleration.cpp',
  bd + '/NMEA/Attitude.cpp',
  bd + '/NMEA/ExternalSettings.cpp',
  bd + '/NMEA/FlyingState.cpp',
  bd + '/NMEA/Derived.cpp',
  bd + '/NMEA/VarioInfo.cpp',
  bd + '/NMEA/ClimbInfo.cpp',
  bd + '/NMEA/CirclingInfo.cpp',
  bd + '/NMEA/ThermalBand.cpp',
  bd + '/NMEA/ThermalLocator.cpp',
  bd + '/NMEA/ClimbHistory.cpp',
  bd + '/NMEA/SwitchState.cpp',
  bd + '/NMEA/InputLine.cpp',
  bd + '/NMEA/Checksum.cpp',
  bd + '/NMEA/Aircraft.cpp',
  bd + '/Replay/Replay.cpp',
  bd + '/IGC/IGCParser.cpp',
  bd + '/Replay/IgcReplay.cpp',
  bd + '/Replay/IgcReplayGlue.cpp',
  bd + '/Replay/NmeaReplay.cpp',
  bd + '/Replay/NmeaReplayGlue.cpp',
  bd + '/Replay/DemoReplay.cpp',
  bd + '/Replay/DemoReplayGlue.cpp',
  bd + '/Replay/TaskAutoPilot.cpp',
  bd + '/Replay/AircraftSim.cpp',
  bd + '/TeamCode.cpp',
  bd + '/TeamActions.cpp',
  bd + '/Waypoint/WaypointList.cpp',
  bd + '/Waypoint/WaypointListBuilder.cpp',
  bd + '/Waypoint/WaypointFilter.cpp',
  bd + '/Waypoint/WaypointGlue.cpp',
  bd + '/Waypoint/LastUsed.cpp',
  bd + '/Waypoint/HomeGlue.cpp',
  bd + '/Waypoint/WaypointFileType.cpp',
  bd + '/Waypoint/WaypointReader.cpp',
  bd + '/Waypoint/WaypointReaderBase.cpp',
  bd + '/Waypoint/WaypointReaderOzi.cpp',
  bd + '/Waypoint/WaypointReaderFS.cpp',
  bd + '/Waypoint/WaypointReaderWinPilot.cpp',
  bd + '/Waypoint/WaypointReaderSeeYou.cpp',
  bd + '/Waypoint/WaypointReaderZander.cpp',
  bd + '/Waypoint/WaypointReaderCompeGPS.cpp',
  bd + '/Waypoint/WaypointWriter.cpp',
  bd + '/Wind/CirclingWind.cpp',
  bd + '/Wind/WindMeasurementList.cpp',
  bd + '/Wind/WindStore.cpp',
  bd + '/Wind/WindEKF.cpp',
  bd + '/Wind/WindEKFGlue.cpp',
  bd + '/CrossSection/AirspaceXSRenderer.cpp',
  bd + '/CrossSection/TerrainXSRenderer.cpp',
  bd + '/CrossSection/CrossSectionRenderer.cpp',
  bd + '/CrossSection/CrossSectionWindow.cpp',
  bd + '/CrossSection/CrossSectionWidget.cpp',
  bd + '/Gauge/ThermalAssistantRenderer.cpp',
  bd + '/Gauge/ThermalAssistantWindow.cpp',
  bd + '/Gauge/BigThermalAssistantWindow.cpp',
  bd + '/Gauge/BigThermalAssistantWidget.cpp',
  bd + '/Gauge/FlarmTrafficWindow.cpp',
  bd + '/Gauge/BigTrafficWidget.cpp',
  bd + '/Look/FlarmTrafficLook.cpp',
  bd + '/Gauge/GaugeFLARM.cpp',
  bd + '/Gauge/GaugeThermalAssistant.cpp',
  bd + '/Gauge/VarioSettings.cpp',
  bd + '/Gauge/TrafficSettings.cpp',
  bd + '/Gauge/GaugeVario.cpp',
  bd + '/Gauge/GlueGaugeVario.cpp',
  bd + '/Gauge/TaskView.cpp',
  bd + '/Gauge/LogoView.cpp',
  bd + '/Waypoint/WaypointDetailsReader.cpp',
  bd + '/Menu/MenuData.cpp',
  bd + '/Menu/MenuBar.cpp',
  bd + '/Menu/ButtonLabel.cpp',
  bd + '/Menu/ExpandMacros.cpp',
  bd + '/InfoBoxes/Content/Factory.cpp',
  bd + '/InfoBoxes/Content/Alternate.cpp',
  bd + '/InfoBoxes/Content/Base.cpp',
  bd + '/InfoBoxes/Content/Altitude.cpp',
  bd + '/InfoBoxes/Content/Direction.cpp',
  bd + '/InfoBoxes/Content/Glide.cpp',
  bd + '/InfoBoxes/Content/MacCready.cpp',
  bd + '/InfoBoxes/Content/Other.cpp',
  bd + '/InfoBoxes/Content/Speed.cpp',
  bd + '/InfoBoxes/Content/Task.cpp',
  bd + '/InfoBoxes/Content/Team.cpp',
  bd + '/InfoBoxes/Content/Terrain.cpp',
  bd + '/InfoBoxes/Content/Thermal.cpp',
  bd + '/InfoBoxes/Content/Time.cpp',
  bd + '/InfoBoxes/Content/Trace.cpp',
  bd + '/InfoBoxes/Content/Weather.cpp',
  bd + '/InfoBoxes/Content/Airspace.cpp',
  bd + '/InfoBoxes/Data.cpp',
  bd + '/InfoBoxes/Format.cpp',
  bd + '/InfoBoxes/Units.cpp',
  bd + '/InfoBoxes/InfoBoxSettings.cpp',
  bd + '/InfoBoxes/InfoBoxWindow.cpp',
  bd + '/InfoBoxes/InfoBoxLayout.cpp',
  bd + '/InfoBoxes/InfoBoxManager.cpp',
  bd + '/InfoBoxes/Panel/AltitudeInfo.cpp',
  bd + '/InfoBoxes/Panel/AltitudeSimulator.cpp',
  bd + '/InfoBoxes/Panel/AltitudeSetup.cpp',
  bd + '/InfoBoxes/Panel/MacCreadyEdit.cpp',
  bd + '/InfoBoxes/Panel/MacCreadySetup.cpp',
  bd + '/InfoBoxes/Panel/WindEdit.cpp',
  bd + '/InfoBoxes/Panel/WindSetup.cpp',
  bd + '/Pan.cpp',
  bd + '/Input/InputConfig.cpp',
  bd + '/Input/InputDefaults.cpp',
  bd + '/Input/InputEvents.cpp',
  bd + '/Input/InputEventsActions.cpp',
  bd + '/Input/InputEventsDevice.cpp',
  bd + '/Input/InputEventsVega.cpp',
  bd + '/Input/InputEventsInfoBox.cpp',
  bd + '/Input/InputEventsMap.cpp',
  bd + '/Input/InputEventsPage.cpp',
  bd + '/Input/InputEventsAirspace.cpp',
  bd + '/Input/InputEventsTask.cpp',
  bd + '/Input/InputEventsSettings.cpp',
  bd + '/Input/InputEventsThermalAssistant.cpp',
  bd + '/Input/InputEventsTraffic.cpp',
  bd + '/Input/InputQueue.cpp',
  bd + '/Input/InputLookup.cpp',
  bd + '/Input/InputKeys.cpp',
  bd + '/Input/InputParser.cpp',
  bd + '/Input/TaskEventObserver.cpp',
  bd + '/PageSettings.cpp',
  bd + '/PageActions.cpp',
  bd + '/StatusMessage.cpp',
  bd + '/PopupMessage.cpp',
  bd + '/Message.cpp',
  bd + '/LogFile.cpp',
  bd + '/Geo/Geoid.cpp',
  bd + '/MapWindow/MapCanvas.cpp',
  bd + '/MapWindow/MapDrawHelper.cpp',
  bd + '/Projection/Projection.cpp',
  bd + '/Projection/WindowProjection.cpp',
  bd + '/Projection/CompareProjection.cpp',
  bd + '/Renderer/ChartRenderer.cpp',
  bd + '/Renderer/BackgroundRenderer.cpp',
  bd + '/Renderer/FAITriangleAreaRenderer.cpp',
  bd + '/Renderer/OZRenderer.cpp',
  bd + '/Renderer/TaskPointRenderer.cpp',
  bd + '/Renderer/TaskRenderer.cpp',
  bd + '/Renderer/AircraftRenderer.cpp',
  bd + '/Renderer/AirspaceRenderer.cpp',
  bd + '/Renderer/AirspaceListRenderer.cpp',
  bd + '/Renderer/AirspacePreviewRenderer.cpp',
  bd + '/Renderer/BestCruiseArrowRenderer.cpp',
  bd + '/Renderer/CompassRenderer.cpp',
  bd + '/Renderer/FinalGlideBarRenderer.cpp',
  bd + '/Renderer/MapItemListRenderer.cpp',
  bd + '/Renderer/OZPreviewRenderer.cpp',
  bd + '/Renderer/TrackLineRenderer.cpp',
  bd + '/Renderer/TrafficRenderer.cpp',
  bd + '/Renderer/TrailRenderer.cpp',
  bd + '/Renderer/UnitSymbolRenderer.cpp',
  bd + '/Renderer/WaypointListRenderer.cpp',
  bd + '/Renderer/WaypointIconRenderer.cpp',
  bd + '/Renderer/WaypointRenderer.cpp',
  bd + '/Renderer/WaypointRendererSettings.cpp',
  bd + '/Renderer/WaypointLabelList.cpp',
  bd + '/Renderer/WindArrowRenderer.cpp',
  bd + '/Projection/ChartProjection.cpp',
  bd + '/MapWindow/Items/MapItem.cpp',
  bd + '/MapWindow/Items/List.cpp',
  bd + '/MapWindow/Items/Builder.cpp',
  bd + '/MapWindow/MapWindow.cpp',
  bd + '/MapWindow/MapWindowEvents.cpp',
  bd + '/MapWindow/MapWindowGlideRange.cpp',
  bd + '/Projection/MapWindowProjection.cpp',
  bd + '/MapWindow/MapWindowRender.cpp',
  bd + '/MapWindow/MapWindowSymbols.cpp',
  bd + '/MapWindow/MapWindowContest.cpp',
  bd + '/MapWindow/MapWindowTask.cpp',
  bd + '/MapWindow/MapWindowThermal.cpp',
  bd + '/MapWindow/MapWindowTraffic.cpp',
  bd + '/MapWindow/MapWindowTrail.cpp',
  bd + '/MapWindow/MapWindowWaypoints.cpp',
  bd + '/MapWindow/GlueMapWindow.cpp',
  bd + '/MapWindow/GlueMapWindowItems.cpp',
  bd + '/MapWindow/GlueMapWindowEvents.cpp',
  bd + '/MapWindow/GlueMapWindowOverlays.cpp',
  bd + '/MapWindow/GlueMapWindowDisplayMode.cpp',
  bd + '/MapWindow/TargetMapWindow.cpp',
  bd + '/MapWindow/TargetMapWindowEvents.cpp',
  bd + '/MapWindow/TargetMapWindowDrag.cpp',
  bd + '/UIUtil/GestureManager.cpp',
  bd + '/UIUtil/TrackingGestureManager.cpp',
  bd + '/DrawThread.cpp',
  bd + '/Computer/BasicComputer.cpp',
  bd + '/Computer/AutoQNH.cpp',
  bd + '/Blackboard/BlackboardListener.cpp',
  bd + '/Blackboard/ProxyBlackboardListener.cpp',
  bd + '/Blackboard/RateLimitedBlackboardListener.cpp',
  bd + '/Blackboard/LiveBlackboard.cpp',
  bd + '/Blackboard/InterfaceBlackboard.cpp',
  bd + '/Blackboard/ScopeGPSListener.cpp',
  bd + '/Blackboard/ScopeCalculatedListener.cpp',
  bd + '/Blackboard/DeviceBlackboard.cpp',
  bd + '/MapWindow/MapWindowBlackboard.cpp',
  bd + '/Dialogs/DialogSettings.cpp',
  bd + '/UIReceiveBlackboard.cpp',
  bd + '/UIGlobals.cpp',
  bd + '/UIState.cpp',
  bd + '/UISettings.cpp',
  bd + '/DisplaySettings.cpp',
  bd + '/MapSettings.cpp',
  bd + '/SystemSettings.cpp',
  bd + '/Audio/Settings.cpp',
  bd + '/Audio/VarioSettings.cpp',
  bd + '/ComputerSettings.cpp',
  bd + '/TeamCodeSettings.cpp',
  bd + '/MergeThread.cpp',
  bd + '/CalculationThread.cpp',
  bd + '/DisplayMode.cpp',
  bd + '/Topography/TopographyFile.cpp',
  bd + '/Topography/TopographyStore.cpp',
  bd + '/Topography/TopographyFileRenderer.cpp',
  bd + '/Topography/TopographyRenderer.cpp',
  bd + '/Topography/TopographyGlue.cpp',
  bd + '/Topography/XShape.cpp',
  bd + '/Markers/Markers.cpp',
  bd + '/Markers/ProtectedMarkers.cpp',
  bd + '/FlightStatistics.cpp',
  bd + '/Renderer/FlightStatisticsRenderer.cpp',
  bd + '/Renderer/BarographRenderer.cpp',
  bd + '/Renderer/ClimbChartRenderer.cpp',
  bd + '/Renderer/GlidePolarRenderer.cpp',
  bd + '/Renderer/WindChartRenderer.cpp',
  bd + '/Renderer/CuRenderer.cpp',
  bd + '/Simulator.cpp',
  bd + '/Asset.cpp',
  bd + '/Hardware/Display.cpp',
  bd + '/Hardware/DisplayGlue.cpp',
  bd + '/Hardware/Vibrator.cpp',
  bd + '/Language/MOFile.cpp',
  bd + '/Language/Language.cpp',
  bd + '/Language/LanguageGlue.cpp',
  bd + '/LocalPath.cpp',
  bd + '/UIActions.cpp',
  bd + '/Interface.cpp',
  bd + '/ActionInterface.cpp',
  bd + '/ProgressWindow.cpp',
  bd + '/ProgressGlue.cpp',
  bd + '/LocalTime.cpp',
  bd + '/Units/Units.cpp',
  bd + '/Units/UnitsGlue.cpp',
  bd + '/Units/UnitsStore.cpp',
  bd + '/Formatter/Units.cpp',
  bd + '/Formatter/UserUnits.cpp',
  bd + '/Formatter/HexColor.cpp',
  bd + '/Formatter/GlideRatioFormatter.cpp',
  bd + '/Formatter/GeoPointFormatter.cpp',
  bd + '/Formatter/ByteSizeFormatter.cpp',
  bd + '/Formatter/UserGeoPointFormatter.cpp',
  bd + '/Formatter/TimeFormatter.cpp',
  bd + '/Formatter/IGCFilenameFormatter.cpp',
  bd + '/Formatter/AirspaceFormatter.cpp',
  bd + '/Formatter/AirspaceUserUnitsFormatter.cpp',
  bd + '/Units/Descriptor.cpp',
  bd + '/Units/System.cpp',
  bd + '/Units/Settings.cpp',
  bd + '/Formatter/AngleFormatter.cpp',
  bd + '/FLARM/FlarmDetails.cpp',
  bd + '/FLARM/NameDatabase.cpp',
  bd + '/FLARM/NameFile.cpp',
  bd + '/FLARM/TrafficDatabases.cpp',
  bd + '/UtilsSettings.cpp',
  bd + '/UtilsSystem.cpp',
  bd + '/Version.cpp',
  bd + '/Audio/Sound.cpp',
  bd + '/Audio/VegaVoice.cpp',
  bd + '/Compatibility/fmode.c',
  bd + '/Profile/Profile.cpp',
  bd + '/Profile/Earth.cpp',
  bd + '/Profile/Screen.cpp',
  bd + '/Profile/TrackingProfile.cpp',
  bd + '/Profile/SystemProfile.cpp',
  bd + '/Profile/ComputerProfile.cpp',
  bd + '/Profile/RouteProfile.cpp',
  bd + '/Profile/ContestProfile.cpp',
  bd + '/Profile/TaskProfile.cpp',
  bd + '/Profile/MapProfile.cpp',
  bd + '/Profile/PageProfile.cpp',
  bd + '/Profile/UIProfile.cpp',
  bd + '/Profile/ProfileGlue.cpp',
  bd + '/Profile/ProfileKeys.cpp',
  bd + '/Profile/FontConfig.cpp',
  bd + '/Profile/UnitsConfig.cpp',
  bd + '/Profile/DeviceConfig.cpp',
  bd + '/Profile/InfoBoxConfig.cpp',
  bd + '/Profile/AirspaceConfig.cpp',
  bd + '/Profile/TerrainConfig.cpp',
  bd + '/Profile/FlarmProfile.cpp',
  bd + '/XML/Node.cpp',
  bd + '/XML/Parser.cpp',
  bd + '/XML/Writer.cpp',
  bd + '/XML/DataNode.cpp',
  bd + '/XML/DataNodeXML.cpp',
  bd + '/Repository/FileRepository.cpp',
  bd + '/Repository/Parser.cpp',
  bd + '/Job/Thread.cpp',
  bd + '/Job/Async.cpp',
  bd + '/RateLimiter.cpp',
  bd + '/Tracking/TrackingSettings.cpp',
  bd + '/Math/Screen.cpp',
  bd + '/Math/SunEphemeris.cpp',
  bd + '/Screen/Blank.cpp',
  bd + '/Screen/Layout.cpp',
  bd + '/Screen/UnitSymbol.cpp',
  bd + '/Screen/Ramp.cpp',
  bd + '/Screen/TerminalWindow.cpp',
  bd + '/ResourceLoader.cpp',
  bd + '/Look/Fonts.cpp',
  bd + '/Look/CustomFonts.cpp',
  bd + '/Look/Look.cpp',
  bd + '/Look/DialogLook.cpp',
  bd + '/Look/ButtonLook.cpp',
  bd + '/Look/TerminalLook.cpp',
  bd + '/Look/VarioLook.cpp',
  bd + '/Look/ChartLook.cpp',
  bd + '/Look/MapLook.cpp',
  bd + '/Look/WindArrowLook.cpp',
  bd + '/Look/ThermalBandLook.cpp',
  bd + '/Look/TraceHistoryLook.cpp',
  bd + '/Look/AirspaceLook.cpp',
  bd + '/Look/TrailLook.cpp',
  bd + '/Look/CrossSectionLook.cpp',
  bd + '/Look/GestureLook.cpp',
  bd + '/Look/HorizonLook.cpp',
  bd + '/Look/TaskLook.cpp',
  bd + '/Look/TrafficLook.cpp',
  bd + '/Look/InfoBoxLook.cpp',
  bd + '/Look/WaypointLook.cpp',
  bd + '/Look/AircraftLook.cpp',
  bd + '/Look/MarkerLook.cpp',
  bd + '/Look/NOAALook.cpp',
  bd + '/Look/FinalGlideBarLook.cpp',
  bd + '/Look/IconLook.cpp',
  bd + '/Look/UnitsLook.cpp',
  bd + '/Look/ThermalAssistantLook.cpp',
  bd + '/Polar/PolarGlue.cpp',
  bd + '/Polar/PolarFileGlue.cpp',
  bd + '/Polar/Shape.cpp',
  bd + '/Polar/Polar.cpp',
  bd + '/Polar/Parser.cpp',
  bd + '/Polar/PolarStore.cpp',
  bd + '/Protection.cpp',
  bd + '/BatteryTimer.cpp',
  bd + '/ProcessTimer.cpp',
  bd + '/ApplyExternalSettings.cpp',
  bd + '/ApplyVegaSwitches.cpp',
  bd + '/MainWindow.cpp',
  bd + '/Startup.cpp',
  bd + '/Components.cpp',
  bd + '/Device/Driver.cpp',
  bd + '/Device/Declaration.cpp',
  bd + '/Device/Register.cpp',
  bd + '/Device/List.cpp',
  bd + '/Device/device.cpp',
  bd + '/Device/Port/ConfiguredPort.cpp',
  bd + '/Device/Descriptor.cpp',
  bd + '/Device/Dispatcher.cpp',
  bd + '/Device/All.cpp',
  bd + '/Device/Parser.cpp',
  bd + '/Device/Simulator.cpp',
  bd + '/Device/Port/LineSplitter.cpp',
  bd + '/Device/Internal.cpp',
  bd + 'Tracking/SkyLines/Client.cpp',
  bd + 'Tracking/SkyLines/Glue.cpp',
  bd + 'Tracking/TrackingGlue.cpp',
  bd + 'Renderer/HorizonRenderer.cpp'
  ] + dialog_srcs + inu_srcs
if e['HAVE_HTTP'] == 'y':
  xcsoar_srcs += [ bd + 'Renderer/NOAAListRenderer.cpp',
                   bd + 'Weather/NOAAGlue.cpp',
                   bd + 'Weather/METARParser.cpp',
                   bd + 'Weather/NOAAFormatter.cpp',
                   bd + 'Weather/NOAADownloader.cpp',
                   bd + 'Weather/NOAAStore.cpp',
                   bd + 'Weather/NOAAUpdater.cpp',
                   bd + 'Tracking/LiveTrack24.cpp' ]
if e['HAVE_PCM_PLAYER'] == 'y':
  xcsoar_srcs += [ bd + 'Audio/VarioGlue.cpp' ]
if e['TARGET_OS'] == 'Android':
  xcsoar_srcs += [ bd + 'Java/Global.cpp',
                   bd + 'Java/String.cpp',
                   bd + 'Java/File.cpp',
                   bd + 'Java/InputStream.cpp',
                   bd + 'Java/URL.cpp',
                   bd + 'Device/Port/AndroidPort.cpp',
                   bd + 'Device/Port/AndroidBluetoothPort.cpp',
                   bd + 'Android/Environment.cpp',
                   bd + 'Android/Product.cpp',
                   bd + 'Android/InternalSensors.cpp',
                   bd + 'Android/SoundUtil.cpp',
                   bd + 'Android/TextUtil.cpp',
                   bd + 'Android/Timer.cpp',
                   bd + 'Android/EventBridge.cpp',
                   bd + 'Android/NativeInputListener.cpp',
                   bd + 'Android/PortBridge.cpp',
                   bd + 'Android/BluetoothHelper.cpp',
                   bd + 'Android/Battery.cpp',
                   bd + 'Android/DownloadManager.cpp',
                   bd + 'Android/Vibrator.cpp',
                   bd + 'Android/Context.cpp',
                   bd + 'Android/LogCat.cpp',
                   bd + 'Android/Main.cpp',
                   bd + 'Screen/Android/Bitmap.cpp' ]
  if e['IOIOLIB_DIR'] != '':
    xcsoar_srcs += [ bd + 'Device/Port/AndroidIOIOUartPort.cpp',
                     bd + 'Android/NativeBMP085Listener.cpp',
                     bd + 'Android/BMP085Device.cpp',
                     bd + 'Android/NativeI2CbaroListener.cpp',
                     bd + 'Android/I2CbaroDevice.cpp',
                     bd + 'Android/NativeNunchuckListener.cpp',
                     bd + 'Android/NunchuckDevice.cpp',
                     bd + 'Android/NativeVoltageListener.cpp',
                     bd + 'Android/VoltageDevice.cpp',
                     bd + 'Android/IOIOHelper.cpp' ]
else:
  xcsoar_srcs += [ bd + 'CommandLine.cpp',
                   bd + 'Hardware/Battery.cpp',
                   bd + 'XCSoar.cpp' ]

e.Program('bin/xcsoar',
          xcsoar_srcs,
          LIBS = [ 'profile',
                   'terrain',
                   'jasper',
                   'widget',
                   'form',
                   'datafield',
                   'audio',
                   'screen',
                   'event',
                   'screen',
                   'driver',
                   'cai302',
                   'port',
                   'io',
                   'async',
                   'task',
                   'contest',
                   'route',
                   'glide',
                   'waypoint',
                   'airspace',
                   'shapelib',
                   'zzip',
                   'net',
                   'time',
                   'os',
                   'thread',
                   'util',
                   'geo',
                   'math',

                   'pthread',
                   'rt',
                   'm',
                   'SDL_image',
                   'SDL_ttf',
                   'SDL',
                   'GL',
                   'z',
                   'curl'],
          LIBPATH = [ '.',
                    '/usr/local/SDL_ttf/lib' ])
